[["session2.html", "Session 2: Using Vectors and Functions Learning Objectives Vectors Creating vectors with random numbers Frequency tables in R and Histograms Exercise 3", " Session 2: Using Vectors and Functions Learning Objectives In this session we be introducing the concepts of vectors and functions. These are two elements of R that will prove to be very useful in your day to day practice. We will also start working on some basic concepts of statistical exploration of data. One of the first steps we take as Psychologists when we want to analyse our data, is first to get a feel, or gist if you want, of how are data are distributed. By the end of this Lab session you should have a clear understanding of the following concepts: Vectors Functions and Arguments Creating Random Data for Practice Purposes Grouping Data using R Creating Frequency Tables using R Creating a basic Histograms using R Before we begin, do make sure you start a new project and name it Session 2. Note:If you are running RStudio Cloud do not start a new project, continue working on the same one from last week. Vectors Let us assume that we asked 15 participants to report their age. One way to record this in R would be to use one variable per participant. It would look something like the following (DO NOT TYPE THE FOLLOWING IN RSTUDIO!!) age1 &lt;- 18 age2 &lt;- 20 age3 &lt;- 35 # and so on all the way down until we reach age15 &lt;- 32 As you can see this would take 15 variables. Not only it would look horrible but also it would be a very wasteful way to store our information. For cases where we want to store multiple observations single value variables are not the best way forward. Actually they are the worst way forward. Instead we can use a variable that can store many different values at once, a vector. The following is an example of a vector that stores our participants 15 ages. Please do type the following in your R script and do run each line to see the output. You should name your R script session2. # We are creating a vector c and we are populating it with 15 values # Then we assign it to a variable called Age Age &lt;- c(18, 18, 20, 32, 45, 33, 19, 19, 20, 58, 63, 21, 19, 19, 18) # If we call the variable Age we will get all 15 values Age [1] 18 18 20 32 45 33 19 19 20 58 63 21 19 19 18 # But we can also access any of the 15 entries we want by calling its &quot;location&quot; Age[7] [1] 19 Note we always use c() to define a vector. The same way we did calculations with simple value variables we can also do with vectors. For example, we may have a vector or prices for products and we may want to double the price of all of the products at once: # We are creating a vector c and we are populating it with 5 prices. # The prices could be in Â£ or any other currency (we only type the value in). # Then we assign our vector to a variable called Prices. Prices &lt;- c(115, 120, 200, 300, 500) # call Price to see the values in the console Prices [1] 115 120 200 300 500 # We now want a new variable that will include the old prices doubled. # We can call the new variable anything we want, let us call it Newprices Newprices &lt;- 2*Prices # call Price to see the values in the console Newprices [1] 230 240 400 600 1000 # But we can also access any of the 15 entries we want by calling its &quot;location&quot; Age[7] [1] 19 You see how powerful and handy vectors can be as they allow us to work with many values as once. We will be using vectors a lot in our work, as well as an extension of vectors called dataframes. (More about dataframes in the next sessions) Creating vectors with random numbers As we do not have any real data yet, we might want to practice out learning with some made up data sets. That is absolutely fine but it poses a problem. If we want to create a vector with 200 made up values it will take us quite a while to actually type 200 values. Luckily, there is a solution to that. We can use an R function to create these numbers automatically. Let us see this in practice with a small example. # I am using a R function called sample.int() # This function creates random integer numbers numbers &lt;- sample.int(10, 5, replace = TRUE) numbers [1] 4 6 10 8 3 As mentioned above, I used a function called sample.int(). A function in R, is a mechanism that can perform a task. In this case our function can select an integer number randomly. A function also includes two brackets (). Within these brackets we can specify our own arguments in order to be clear what we want R to do for us when this function is used. Notice the number 10, this argument instructs our function that we want to pick randomly a number between 1 and 10. Notice the second number 5, this argument instructs our function to give 5 such numbers from 1 to 10. Notice the replace = TRUE part, this is another argument instructing R that numbers could be repeated. In other words, we can see the same number appearing more than once. Frequency tables in R and Histograms Let us now proceed to a larger data set comprised of 200 random integers between 1 and 50. We will organise that data in 5 groups and produce a grouped frequency table. Then lastly, we will create a histogram with the same 5 groups. # Similarly as above, I will call sample.int() # But this time I need 200 numbers between 1 and 50. # See how my arguments have now changed. numbers &lt;- sample.int(50, 200, replace = TRUE) numbers [1] 35 37 12 13 8 32 24 3 45 27 2 15 25 3 3 14 12 39 5 44 20 20 8 35 12 [26] 28 39 33 34 34 5 26 47 39 25 40 4 13 42 25 36 19 5 31 18 45 2 48 32 29 [51] 40 17 46 24 45 34 8 38 11 13 30 21 49 13 28 5 27 8 31 30 46 28 50 44 6 [76] 48 15 47 5 46 30 23 5 36 35 36 21 32 25 29 22 43 3 45 20 2 15 11 49 7 [101] 49 16 7 3 11 14 11 25 1 11 25 5 10 16 21 41 8 7 26 28 8 23 18 17 17 [126] 50 25 28 39 19 6 2 16 6 7 29 47 2 42 25 25 45 2 46 27 7 29 34 27 34 [151] 29 43 16 31 18 11 37 30 25 4 26 5 40 19 27 17 4 7 28 32 22 50 47 45 10 [176] 30 20 14 40 25 39 49 1 16 16 3 10 8 48 1 44 34 29 32 48 39 38 15 24 10 # Now we will call a new function to help us group our data. # First put them in 5 groups. The numbers in c() declare the numbers that define each group. groups &lt;- cut(numbers, breaks = c(0,10,20,30,40,50), right = TRUE) # Now I can produce my frequency table using another function summary(groups) (0,10] (10,20] (20,30] (30,40] (40,50] 46 40 46 35 33 # We will now use a new function called hist that creates histograms. # Note that this function has to work with the original numbers # and not with the groups. hist(numbers, breaks = 5, labels = TRUE) Lets discuss the functions we used: sample.init() creates a sample of integer numbers cut() cuts our sample in smaller pieces. For arguments we had to provide our original sample (numbers). We then specified at what numbers we wanted the breaks to be (c(0,10,20,30,40,50)). Finally, we wanted the numbers on the right end of each group to be included in the count. summary() prints out the group frequency table, we only need one argument here, the variable that contains the grouped data (groups). hist() creates a histogram from our original sample (not the grouped one!!!). The arguments here were our sample (numbers), how many breaks we wanted (breaks = 5), and we wanted each bar to have its frequency at the top (labels = TRUE). As you can see we can define how many groups we want when we ask for our histogram. So when all we want is a histogram, then the cut() and summary() steps can be omitted. The histogram will do that behind the scenes and show us the frequencies in the graph. Try it out on your own by changing the number of breaks in the histogram. Notice each time your run your code you will get a different frequency distribution and a different histogram. This is because we create these 200 numbers randomly and each time we are getting a new set. Exercise 3 Create a random set of 200 integers between 1 and 40. Group that data in 8 groups and produce the grouped frequency table. Then produce a histogram using these 8 groups. Spend some time to experiments with the number of bars in the histogram as well as generating new random numbers. This will allow you to become more confident with the use of arguments in functions. "]]
