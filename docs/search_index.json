[["session5.html", "Session 6 Tidyverse 2 6.1 Reflecting on the last session 6.2 Pipe Operator %&lt;% 6.3 Exercise 10 6.4 Grouping, spliting, and summarizing variables across out data frame 6.5 We will leave reshaping from long to wide format and vice-versa next week", " Session 6 Tidyverse 2 6.1 Reflecting on the last session We have managed to do quite a few tasks already. However, we also managed to create a proper in the process. Our environment must be full of objects that I will not be using. And even though I could remove them it is best if I actually do not create them in the first place. That can be achieved with the use of the pipe operator or else %&lt;% (ctrl+shift+m). ##Learning objectives 1. Work more efficiently using tidyverse (dplyr and tidyr) 2. manipulating data 3. summarising data 4. change from long to wide format and vice-versa Note: In this session we will be focusing on describing a number of tasks and then discussing how we can best perform them. We have already introduced enough concepts to do really meaningful work. Now we have to put our progress to the test. 6.2 Pipe Operator %&lt;% Lets start with seeing how the pipe operator works. If you think about the last exercise in the previous session you can remember that it took a number of steps where we kept assigning our work to a new data frame. With the use of %&lt;% we can write all these steps one under the other in one chunk of code. Exercise 9 Load the file alcohol_exp to a data frame called df. Then write the appropriate commands to complete the following steps: Set group, session, meditation, and gender as factors Keep only these four variables and response.rt Recode session from 1 and 2 to pre and post Recode group from 1 and 2 to high and low Keep only Female participants Keep only response.rt below 1.5 save your final data frame into a file called wastedresources.csv library(tidyverse) df &lt;- read_csv(&quot;alcohol_exp.csv&quot;) df3 &lt;- df %&gt;% mutate(group = as.factor(group)) %&gt;% mutate(session = as.factor(session)) %&gt;% mutate(meditation = as.factor(meditation)) %&gt;% mutate(gender = as.factor(gender)) %&gt;% select(group, session, meditation, gender, response.rt) %&gt;% filter(gender == 2) %&gt;% filter(response.rt &lt; 1.5) %&gt;% ### this could be done with the above mutate(gender = recode(gender,&#39;1&#39; = &quot;Male&quot;, &#39;2&#39;=&quot;Female&quot;)) %&gt;% mutate(gender = recode(group,&#39;1&#39; = &quot;High&quot;, &#39;2&#39;=&quot;Low&quot;)) ### and just for fun lets also create a histogram of reaction times. hist(df3$response.rt) ### lets save the data file write_csv(df3, &quot;wastedresources.csv&quot;) Now your turn 6.3 Exercise 10 Load the file alcohol_qualtrics.csv to a data frame Drop all the variables after the column 17 Make sure gender and smoke are factors Remove any participants with participant number below 100 and above 300 Add a column that is the sum of Days1 to Days4 Reverse code the variable Freq4 Add a column that is the mean of Freq1, Freq2, Freq3, and the above reversed coded variable Save the final file using a file name of your choice. 6.4 Grouping, spliting, and summarizing variables across out data frame Other jobs that we usually carry out when preparing out data files include aggregating variables, grouping by a variable, or splitting our file. This can also be done easily in R using the function group_by(). Lets see an example here: library(tidyverse) df &lt;- read_csv(&quot;alcohol_exp.csv&quot;) df %&gt;% group_by(gender) %&gt;% summarize(mean = mean(response.rt), sd = sd(response.rt), N = n()) %&gt;% ungroup() I can also add a new column in my data frame that will include information on the mean per gender. df %&gt;% group_by(gender) %&gt;% mutate(mean = mean(response.rt)) %&gt;% ungroup() Not that meaningful to be honest. Lets try again but this time grouping by participant. df %&gt;% group_by(participant) %&gt;% mutate(mean = mean(response.rt)) %&gt;% ungroup() This is much more useful from our perspective. Which brings us to the point that we can pretty much reshape a data frame in any way we want. So your work with R should be guided by your end goal, which is how you want your data file to look before your analysis. 6.5 We will leave reshaping from long to wide format and vice-versa next week "]]
