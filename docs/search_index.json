[["session4.html", "Session 5 Tidyverse 1 5.1 Thinking ahead 5.2 Learning objectives 5.3 Our first data file 5.4 Correcting Variable Types 5.5 Recoding 5.6 Exercise 9", " Session 5 Tidyverse 1 5.1 Thinking ahead In this session we will start putting together everything we covered so far and start working on some of our own data. Here we should make a pause and think of the process we follow when we work with our data from start to finish. This process usually involves the following steps: load our data inspect the data file maybe create some basic graphs to see how things look or even calculate some basic descriptive statistics go through a process of cleaning (e.g., recoding, reverse scoring etc) restructuring the data file for the purposes of our analysis more graphs planned analysis report (if we havent run out of coffee) It is crucial to keep this process in mind as it will guide through the next two sessions. 5.2 Learning objectives Loading our data into R Inspect our Data frames Visually exploring our data Selecting and filtering our data Saving our data frames into files 5.3 Our first data file First, create a new project in our usual R training folder. Name the new folder and the new project session4. In our Files tab in our R training team you should be able to see a data file called alco_exp. This a data file from one of my experiments and I will provide some more detail as we go along. Download this file and place it in your session4 folder in the R Training folder. By doing so we can load into our scripts without having to specify the full path of the file. Now create a new script, also called session4. Type the following commands and run them one line at a time: library(tidyverse) ### load our &quot;alcohol_exp,csv&quot; into a df called &quot;alc_df&quot; alc_df &lt;- read_csv(&quot;alcohol_exp.csv&quot;) You should be able to see the following output in your console, or at least parts of it: ## Warning: replacing previous import &#39;vctrs::data_frame&#39; by &#39;tibble::data_frame&#39; ## when loading &#39;dplyr&#39; ## -- Attaching packages -------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.3.2 v purrr 0.3.4 ## v tibble 3.0.4 v dplyr 1.0.0 ## v tidyr 1.1.0 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.5.0 ## Warning: package &#39;tibble&#39; was built under R version 4.0.3 ## -- Conflicts ----------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ## Parsed with column specification: ## cols( ## participant = col_double(), ## group = col_double(), ## session = col_double(), ## image = col_character(), ## duration = col_double(), ## response = col_character(), ## thisRepN = col_double(), ## thisTrialN = col_double(), ## thisN = col_double(), ## thisIndex = col_double(), ## response.rt = col_double(), ## meditation = col_character(), ## gender = col_double(), ## age = col_double() ## ) You can also click on the alc_df object in your Environment, this will open the data frame in a tab where you can inspect it. If you hover your mouse pointer at the top of each column you should see information about each variable. Another way to get that information is by running the function str() and using the name of your data frame as an argument. Try this out and see what you get. Also, experiment with the following functions and try to guess what they produce: dim() summary() names() nrow() ncol() 5.4 Correcting Variable Types From exploring this data frame I can see that we need to adjust the type of some variables. This can be crucial for future sessions where the type of a variable can drastically affect the analysis output. For example, the variable meditation is showing as character, meaning that its content is characters. In reality this is actually a factor with two levels and R should be notified for this. Going through your variables and checking that that are assigned the right type is an important step that will also make you more skilful in the use of R. Add the following commands in your existing scripts: ### changing meditation to a factor variable alc_df$meditation = as.factor(alc_df$meditation) ### check the number of levels and their labels levels(alc_df$meditation) nlevels(alc_df$meditation) Which other variables in the data frame you would say need to be changed to factors? Go ahead and change them. 5.5 Recoding Another process that takes place while preparing data file is recoding. As a good practice we tend to recode a variable into a new variable and preserving the original variable. Tidyverse has a function for this called recode(). However, what we also have to start thinking now is that we want to recode an entire column (vector) of data. Traditionally in R we would need a programming technique called loop. But I promised you that we would keep programming to a minimum. Luckily, tidyverse (actually dplyr) comes to the rescue again with a function called mutate. Lets see an example below: ### creating a new data frame named Gender that contains the recoded gender variable alc_df2 &lt;- mutate(alc_df, Gender = recode(gender, &#39;1&#39; = &quot;Male&quot;, &#39;2&#39; = &quot;Female&quot;)) Upon inspecting the new dataframe called alc_df2 I see that the variable Gender is not a factor but a character. I can change that to using the as.factor function: ### creating a new data frame named Gender that contains the recoded gender variable alc_df2$Gender &lt;- as.factor(alc_df2$Gender) Next, I would like to keep only specific variables. I want to keep the variables ### creating a new data frame named Gender that contains the recoded gender variable alc_df3 &lt;- select(alc_df2, participant, group, session, image, duration, response, response.rt, meditation, age, Gender) This was not really a very efficient way to do that. Select() has a number of option to make our life easier. Especially if we notice that I only skipped four variables. So another way to do that would have been: ### creating a new data frame named Gender that contains the recoded gender variable alc_df4 &lt;- select(alc_df2, c(participant:response, response.rt:Gender)) Or even another way: ### creating a new data frame named Gender that contains the recoded gender variable alc_df5 &lt;- select(alc_df2, !7:10) For some strange reason I also want to filter out any participant with participant number higher than 200. Lets say there a software problem that day and I want all these participants out of my analysis: ### creating a new data frame named Gender that contains the recoded gender variable alc_df6 &lt;- filter(alc_df5, participant &lt; 200) Now that we have a data frame with the data as I want it I can save it to file. All the work we have done so far is with data frames. Data frames are stored in memory so remember to store them to actual files before you exit RStudio (although I am kind of lying to you, but lets pretend you believe me for now). ### creating a new data frame named Gender that contains the recoded gender variable write_csv(alc_df6, &quot;finalfile.csv&quot;) NOTE I have actually been horrible to you and we could have done all the above work in a much better way using what is called pipe operator. But for the time being, we need the practice so we will introduce the piper operator in the next session. 5.6 Exercise 9 Load the file alcohol_exp to a data frame called df. Then write the appropriate commands to complete the following steps: Set group, session, meditation, and gender as factors Keep only these five variables Recode session from 1 and 2 to pre and post Recode group from 1 and 2 to high and low Keep only Female participants save your final data frame into a file called wastedresources.csv "]]
